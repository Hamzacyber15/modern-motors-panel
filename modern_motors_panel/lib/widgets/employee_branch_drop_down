import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:modern_motors_panel/model/hr_models/employees/emlpoyee_model.dart';
import 'package:modern_motors_panel/provider/modern_motors/mm_resource_provider.dart';
class EmployeeBranchDropdown extends StatefulWidget {
  final EmployeeModel employee;
  final Function(String) onBranchSelected;

  const EmployeeBranchDropdown({
    super.key,
    required this.employee,
    required this.onBranchSelected,
  });

  @override
  State<EmployeeBranchDropdown> createState() => _EmployeeBranchDropdownState();
}

class _EmployeeBranchDropdownState extends State<EmployeeBranchDropdown> {
  String? selectedBranchId;

  @override
  void initState() {
    super.initState();
    // Ensure branch gets selected after first build
    WidgetsBinding.instance.addPostFrameCallback((_) {
      final provider = context.read<MmResourceProvider>();
      final allBranches = provider.branchesList;

      final employeeBranches =
          allBranches
              .where((branch) => widget.employee.branches!.contains(branch.id))
              .toList();

      if (employeeBranches.isNotEmpty) {
        setState(() {
          selectedBranchId = employeeBranches.first.id; // default 0 index
        });
        widget.onBranchSelected(selectedBranchId!); // return immediately
        debugPrint("✅ Default branch selected: $selectedBranchId");
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Consumer<MmResourceProvider>(
      builder: (context, resource, child) {
        final allBranches = resource.branchesList;

        // Debug print to check IDs
        debugPrint("Employee branchIds: ${widget.employee.branches}");
        debugPrint(
          "Provider branchIds: ${allBranches.map((e) => e.id).toList()}",
        );

        // Filter only employee's branches
        final employeeBranches =
            allBranches
                .where(
                  (branch) => widget.employee.branches!.contains(branch.id),
                )
                .toList();

        if (employeeBranches.isEmpty) {
          return const Text("No branches assigned");
        }

        return DropdownButtonFormField<String>(
          value:
              (selectedBranchId != null &&
                      employeeBranches.any((b) => b.id == selectedBranchId))
                  ? selectedBranchId
                  : null,
          hint: const Text("Select Branch"),
          items:
              employeeBranches.map((branch) {
                return DropdownMenuItem<String>(
                  value: branch.id,
                  child: Text(branch.branchName),
                );
              }).toList(),
          onChanged: (value) {
            setState(() {
              selectedBranchId = value;
            });
            if (value != null) {
              widget.onBranchSelected(value);
              debugPrint("✅ Selected branchId: $value");
            }
          },
          decoration: const InputDecoration(
            border: OutlineInputBorder(),
            contentPadding: EdgeInsets.symmetric(horizontal: 10, vertical: 5),
          ),
        );
      },
    );
  }
}
